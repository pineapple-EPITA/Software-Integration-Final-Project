{
  "info": {
    "_postman_id": "dc349fd3-0f69-472a-b807-bd8f77dc06ea",
    "name": "Users Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "38366651"
  },
  "item": [
    {
      "name": "Register",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status is 200 or 400 or 409\", function () {",
              "  pm.expect([200, 400, 409]).to.include(pm.response.code);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "  pm.test(\"User created\", function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.message).to.eql(\"User created\");",
              "  });",
              "}",
              "",
              "if (pm.response.code === 409) {",
              "  pm.test(\"User already exists message\", function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.message).to.eql(\"User already has an account\");",
              "  });",
              "}",
              "",
              "if (pm.response.code === 400) {",
              "  pm.test(\"Missing parameter message\", function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.message).to.eql(\"Missing parameters\");",
              "  });",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/register",
          "host": ["{{baseUrl}}"],
          "path": ["users", "register"]
        }
      },
      "response": []
    },
    {
      "name": "Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status is 200 or 400 or 404\", function () {",
              "  pm.expect([200, 400, 404]).to.include(pm.response.code);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "  const json = pm.response.json();",
              "",
              "  pm.test(\"Token exists\", function () {",
              "    pm.expect(json).to.have.property(\"token\");",
              "    pm.expect(json.token.length).to.be.above(0);",
              "  });",
              "",
              "  pm.test(\"Username exists\", function () {",
              "    pm.expect(json).to.have.property(\"username\");",
              "  });",
              "",
              "  // Save token for other requests",
              "  pm.environment.set(\"jwtToken\", json.token);",
              "}",
              "",
              "if (pm.response.code === 404) {",
              "  pm.test(\"Wrong credentials message\", function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.message).to.eql(\"Incorrect email/password\");",
              "  });",
              "}",
              "",
              "if (pm.response.code === 400) {",
              "  pm.test(\"Missing parameter message\", function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.message).to.eql(\"Missing parameters\");",
              "  });",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/login",
          "host": ["{{baseUrl}}"],
          "path": ["users", "login"]
        }
      },
      "response": []
    }
  ]
}
